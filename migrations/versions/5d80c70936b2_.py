"""empty message

Revision ID: 5d80c70936b2
Revises: 56d517a6e3e9
Create Date: 2020-04-16 07:57:54.232885

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5d80c70936b2'
down_revision = '56d517a6e3e9'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note that we're actually setting nullable=True here to avoid getting an error during 
    # upgrade since our previous 'todos' table values would fail the NULL constraint on the 
    # newly added 'completed' column
    op.add_column('todos', sa.Column('completed', sa.Boolean(), nullable=True))

    # Now we're going to actually set the 'competed' column values to False if they were not 
    # already set to some value
    op.execute('UPDATE todos SET completed = False WHERE completed IS NULL;')
    # ### end Alembic commands ###

    # Now that we've made sure that our 'completed' column has values for our existing records, 
    # we can now safely set the 'completed' column's 'nullable' property back to False, 
    # as it is in our actual app.py implementation. This lets us get around the issue of 
    # adding a new column with a null constraint, this way we can keep the null constraint 
    # and add a default value to existing records!
    op.alter_column('todos', 'completed', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('todos', 'completed')
    # ### end Alembic commands ###
